---
# tasks file for vpnpeer_setup
- name: get linux version
  command: uname -r
  register: uname
  changed_when: False

- name: install linux-headers
  apt:
    name: linux-headers-{{ uname.stdout }}
    update_cache: yes
  when: not "+" in uname.stdout

- name: add wireguard repo
  apt_repository:
    repo: ppa:wireguard/wireguard
    state: present

- name: install wireguard
  apt:
    name: wireguard

- name: check if privatekey already exists
  stat:
    path: /etc/wireguard/privatekey
  register: privatekey_file

- name: generate wireguard private key
  shell: |
    set -o pipefail
    wg genkey | tee /etc/wireguard/privatekey
    chmod 600 /etc/wireguard/privatekey
  args:
    executable: /bin/bash
  register: private_key_result
  when: not privatekey_file.stat.exists

- name: get existing private key file content
  shell: |
    set -o pipefail
    cat /etc/wireguard/privatekey
  args:
    executable: /bin/bash
  register: privatekey_file_content
  when: privatekey_file.stat.exists
  changed_when: false

- name: check if publickey already exists
  stat:
    path: /etc/wireguard/publickey
  register: publickey_file

- name: generate wireguard public key
  shell: |
    set -o pipefail
    wg pubkey | tee /etc/wireguard/publickey
    chmod 600 /etc/wireguard/publickey
  args:
    executable: /bin/bash
    stdin: "{{ private_key_result.stdout }}"
  register: public_key
  when: not publickey_file.stat.exists

- name: get existing public key file content
  shell: |
    set -o pipefail
    cat /etc/wireguard/publickey
  args:
    executable: /bin/bash
  register: publickey_file_content
  when: publickey_file.stat.exists
  changed_when: false

- name: save private_key as host fact
  set_fact:
    vpn_private_key: "{{ private_key_result.stdout if not privatekey_file.stat.exists else privatekey_file_content.stdout }}"

- name: save public_key as host fact
  set_fact:
    vpn_public_key: "{{ public_key.stdout if not publickey_file.stat.exists else publickey_file_content.stdout }}"
